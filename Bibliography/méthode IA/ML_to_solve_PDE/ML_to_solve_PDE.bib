@article{Blechschmidt-three-ways,
	author    = {Jan Blechschmidt, Oliver G. Ernst},
	title     = {Three Ways to Solve Partial Differential Equations with Neural Networks -- A Review},
	year      = {2021},
	url       = {https://arxiv.org/abs/2102.11802},
	abstract = {Physics-Informed Neural Networks, the use of Feynman-Kac formula and one using a deep backward stochastic differential equations (BSDEs) solver are the three methods explained. Since the PDE we will dervive from the Mild-Slope equation, it will not necessarily be linear or even semilinear. So, the two last methods can be set apart to only focus on the PINN method. The PINN method is general to any PDE ; it suffices to inform of the equation and differentiate the functions involved. The article comes with the code.}
}




@article{Berg-unified-ANN-for-PDE,
	author    = {Jens Berg, Kaj Nyström},
	title     = {A unified deep artificial neural network approach to partial differentiate equations in complex geometries},
	year      = {2019},
	url       = {https://arxiv.org/abs/1711.06464},
	abstract = {This article dwells on a method to solve a PDE on complex geometries without assisting the neural network to satisfy the boundary conditions. Furthermore, training this neural networks only on the boundary of the domain can result in the neural networks already approximating well the solution of the PDE even inside the domain. It could accelerate the training of the neural networks considering the boundary consists in far less points than the full domain. Yet, the respect of the boundary conditions is not very satistfying.}
}



@article{Lagaris-1997,
	title = {Artificial Neural Networks for Solving Ordinary and Partial Differential Equations},
	year = {1997},
	doi = {https://doi.org/10.48550/arXiv.physics/9705023},
	url = {https://arxiv.org/abs/physics/9705023},
	author = {I.E. Lagaris, A. Likas, D.I. Fotiadis},
	abstract = {This article describes a general method to solve a PDE with a neural network that will help construct another function already forced to satisfy the boundary conditions. It comes with 8 examples and draws a comparison to the Finite Difference Method.}
}

@article{CINT-Galerkin-2015,
	author    = {Keith Rudd and Silvia Ferrari},
	title     = {A constrained integration (CINT) approach to solving partial differential equations using artificial neural networks},
	journal   = {Neurocomputing},
	volume    = {155},
	year      = {2015},
	url       = {https://doi.org/10.1016/J.NEUCOM.2014.11.058},
    abstract  = {il s'agit d'approximer la solution par une somme finie de fonctions Hilbertiennes \
	(par exemple des polynomes trigonométriques ou de Tchebychev) et de séparer la partie satisfaisant les conditions aux limites \
	et celle satisfaisant l'équation. Il s'agit ensuite d'approximer la partie satsfaisant les CL et d'obtenir une \
	équation plus simple sur les poids de la base des vecteurs satisfaisant l'equation. \
	Les résulats ont amélioré de façon significative le temps de calcul et l'erreur par rapport la méthode numérique.}